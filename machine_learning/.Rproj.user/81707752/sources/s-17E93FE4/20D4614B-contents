library("data.table")
library("ggplot2")
install.packages("recommenderlab")
library("recommenderlab")

movies = read.csv("data/ml-latest-small/movies.csv")
str(movies)
head(movies, n=10)
View(movies)

ratings = read.csv("data/ml-latest-small/ratings.csv")
str(ratings)
head(ratings, n=10)
View(ratings)

unique_ratings = unique(ratings)
ggplot(ratings, aes(x = rating)) +
  geom_histogram()

ggplot(unique_ratings, aes(x = rating, fill = factor(rating))) +
  geom_histogram()


movgen <- as.data.frame(movies$genres, stringsAsFactors = FALSE)
movgen2 <- as.data.frame(tstrsplit(movgen[,1], '[|]', type.convert = TRUE),
                         stringsAsFactors = FALSE)
str(movgen2)
colnames(movgen2) <- c(1:7)
head(movgen2, n=4)


movgen_list <- c("Action", "Adventure", "Animation", "Children", "Comedy",
                           "Crime", "Documentary", "Drama", "Fantasy", "Film-Noir",
                           "Horror", "Musical", "Mystery", "Romance", "Sci-Fi",
                           "Thriller", "War", "Western")
movgen_matrix <- matrix(0,9126,18) #empty matrix
movgen_matrix[1,] <- movgen_list
colnames(movgen_matrix) <- movgen_list

# iterate through matrix
for (i in 1:nrow(movgen2)) {
  for (c in 1:ncol(movgen2)) {
    genmat_col = which(movgen_matrix[1,] == movgen2[i,c])
    movgen_matrix[i+1,genmat_col] <- 1
  }
  
}
movgen_matrix
movgen_matrix2 <- as.data.frame(movgen_matrix[-1,], stringsAsFactors = FALSE) # remove 
# first row which has the genre list
movgen_matrix2

for (c in 1:ncol(movgen_matrix2)) {
  movgen_matrix2[,c] <- as.integer(movgen_matrix2[,c])
} # Convert from character to integers

binary_ratings <- as.data.frame(ratings, stringsAsFactors = FALSE)

# Assign 1 to anything between (4-5) and -1 to anything below 4

for (i in 1:nrow(binary_ratings)) {
  if (binary_ratings$rating[i]<4){
    binary_ratings$rating[i]<- -1}
  
  if (binary_ratings$rating[i]>=4){
    binary_ratings$rating[i]<- 1  
  }}
binary_ratings

binary_ratings2 <- dcast(binary_ratings, movieId~userId, value.var = "rating", 
                         na.rm=FALSE) 
for (i in 1:ncol(binary_ratings2)){
  binary_ratings2[which(is.na(binary_ratings2[,i]) == TRUE),i] <- 0
}
binary_ratings2 = binary_ratings2[,-1] #remove movieIds col. Rows are movieIds, 
# cols are userIds
binary_ratings2

#Remove rows that are not rated from movies dataset
unique_movieIds<-length(unique(movies$movieId)) #9125
unique_ratings <-length(unique(ratings$movieId)) # 9066
movies2 <-movies[-which((unique_movieIds %in% unique_ratings) == FALSE),]
rownames(movies2) <-NULL
#Remove rows that are not rated from movgen_matrix2
movgen_matrix3 <-movgen_matrix2[-which((unique_movieIds %in% unique_ratings) == FALSE),]
rownames(movgen_matrix3) <-NULL
View(movgen_matrix3)
binary_ratings2

# calculate dot product
result = matrix(0,18,671)
for (c in 1:ncol(binary_ratings2)) {
  for (i in 1:ncol(movgen_matrix3)) {
    result[i,c] <- sum((movgen_matrix3[,i]) * (binary_ratings2[,c]))
  }
}

#Convert to binary scale
for (i in 1:nrow(result)){
  for(j in 1:ncol(result)){
    if(result[i,j]<0){
      result[i,j] <- 0
    }
    else result[i,j] <- 1
  }
}

View(result)

library("proxy")

# make recommendation
result2 <- result[1,] # first user profile
sim_mat <- rbind.data.frame(result2, movgen_matrix3)
sim_mat <- data.frame(lapply(sim_mat, function(x){as.integer(x)})) # convert data

# calculate Jaccard distance between user profile and all movies
sim_results <- dist(sim_mat, method = "Jaccard")
sim_results <- as.data.frame(as.matrix(sim_results[1:9067]))
rows <- which(sim_results == min(sim_results))

# Recommended movies
movies[rows,2]
